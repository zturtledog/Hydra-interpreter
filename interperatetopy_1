import java.io.File;
import java.io.InputStreamReader;
import java.io.FileOutputStream;
import java.io.BufferedReader;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Clipboard;
import java.awt.Robot;
import java.awt.AWTException;
import java.awt.event.KeyEvent; 

String C_OUT = "";
String folder = "out";

String file_type = "";

int iter = 0;

PFont font;

void setup() {
    size(300, 200);

    font = createFont("Quicksand-Medium.ttf", 32);

    file_type = get_extension();

        runcmd("py -m pip install Tkinter");
    }

void draw() {
    background(#222833);
    textFont(font);

    parse_hydra("C:/hydra/"+get_path());//pyinstaller --noconfirm --onefile --console --icon "outfile.ico"  "C:/hydra/out/out.py"

    runcmd("C://WINDOWS//system32//cmd.exe /c start py C:/hydra/"+folder+"/"+folder+".py");
    // runcmd("py -m auto-py-to-exe true C:/hydra/"+folder+"/"+folder+".py");

    exit();
}

void copys(String textw){
    StringSelection selection = new StringSelection(textw);
    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
    clipboard.setContents(selection, selection);
}//java

void paste()
{
    try {//java
        Robot robot = new Robot();//java

        robot.keyPress(KeyEvent.VK_CONTROL);//java
        robot.keyPress(KeyEvent.VK_V);//java
        robot.keyRelease(KeyEvent.VK_CONTROL);//java
        robot.keyRelease(KeyEvent.VK_V);//java
        robot.keyPress(KeyEvent.VK_ENTER);//java
        robot.keyRelease(KeyEvent.VK_ENTER);//java
        println("?");
    } catch (AWTException e) {//java
        println(e);
    }//java
}

void runcmd(String command) {
    try
    {
        Process proc = new ProcessBuilder(split(command,' ')).start(); 
    } catch (Exception e) {
        println(e);//not java
    }
}

String get_path()
{
    JSONObject data = loadJSONObject("C:/hydra/base_comp.json");

    return(data.getString("path"));
}//not java

String get_extension()
{
    JSONObject data = loadJSONObject("C:/hydra/base_comp.json");

    return(data.getString("langEXTENSION"));
}//not java

String get_key()
{
    JSONObject data = loadJSONObject("C:/hydra/base_comp.json");

    return(data.getString("commentKey"));
}//not java
    
void parse_hydra(String file)
{	
    String[] init_line_data = loadStrings(file);
    char curent = ' ';
    String data_type = "";
    String compile_file = insertLIBS()+"\n";
    
    for (int i = 0; i < init_line_data.length; i++) {
        String str = "";
            
        if (init_line_data[i].length() >= 4) {
            curent = init_line_data[i].charAt(0);   
            data_type = str(init_line_data[i].charAt(1)) + str(init_line_data[i].charAt(2)) + str(init_line_data[i].charAt(3));   
        } else if (init_line_data[i].length() == 1) {
            curent = init_line_data[i].charAt(0);   
        }
            
        if (curent == '$') {
            println("declaration    " + data_type + "   |::|    " + outvarible(init_line_data[i],data_type));
            compile_file += outvarible(init_line_data[i],data_type)+"\n";
        } else if (curent == '_') {
            println("header               |::|    " + outheader(init_line_data[i]));
            compile_file += outheader(init_line_data[i])+"\n";
        } else if (curent == '|') {
            println("comment              |::|    " + shorten(init_line_data[i],1));
            compile_file += get_key()+shorten(init_line_data[i],1);
        } else if (init_line_data[i].length()<2) {
            println("empty                |::|    " + init_line_data[i],2);
        } else {
            str = assemble(splitTokens(init_line_data[i] , " "));
            println("code                 |::|    " + outcode(str));
            compile_file += outcode(str)+"\n";
        }
    }
    compile_file += "\n\n#more\n"+insertdependancies();

    println("\n\n\n\n\n"+compile_file);

    String[] strungs = split(compile_file,'\n');

    saveStrings("C:/hydra/"+folder+"/"+folder+"."+file_type, strungs);
    compile_file = "";
    println(compile_file);
}

String assemble(String[] value)
{
    String end = "";
        
    for (int i = 0; i < value.length; ++i) {
        end += value[i];
    }
        
    return(end);
}

String assembleNL(String[] value)
{
    String end = "";
        
    for (int i = 0; i < value.length; ++i) {
        end += value[i]+"\n";
    }
        
    return(end);
}

int numerate(String value)
{
    int end = 0;

    for (int i = 0; i < value.length(); ++i) {
        char curent = value.charAt(i);

        end += int(curent)*(i*10);
    }

    return(end);
}
    
String outcode(String lineB)
{
    int tabsize = 0;

    String tabs = "";
    String splitlined = split(lineB, ':')[0];
    String lineD = "";
    String end_now = "";

    if (lineB.length()>0) {
        
    
        for (int i = 0; i < splitlined.length(); ++i) {
            if (lineB.charAt(i) == '>') 
            {
                tabs += "   ";
                tabsize++;
            }    
        }

        if (lineB.charAt(0) == '>') {
            lineD = shorten(lineB,tabsize);
        }else {
            lineD = lineB;
        }

        JSONArray values = loadJSONArray("C:/hydra/compiler.json");
        String end = "";

        for (int i = 0; i < values.size(); i++) {
            JSONObject data = values.getJSONObject(i); 

            String func = data.getString("function");
            String code = data.getString("code");

            if (numerate(func) == numerate(split(lineD,":")[0])) {
                String[] n_code = split(code, '|');
                char[] delimit = {'[',']'};
                char[] replace = {'(',')'};

                if (n_code.length>1) {
                    end = n_code[0]+split(lineD,":")[1]+n_code[1];
                }else {
                    end = n_code[0];
                }
            }
        }
        end_now = tabs+end;
    }
    return(end_now);
}

String outheader(String lineD)
{
    JSONArray values = loadJSONArray("C:/hydra/SCFE.json");
    JSONObject data = loadJSONObject("C:/hydra/base_comp.json");

    String[] function_struct = split(data.getString("function"),"|");
    String[] line_data = splitTokens(lineD,":");

    boolean upl = data.getBoolean("UsingPrelimiter");

    String end = line_data[0];
    String ends = "";
    String endss = "";

    for (int i = 0; i < values.size(); ++i) {
        JSONObject datas = values.getJSONObject(i); 
        
        String[] exeption = split(datas.getString("exeption"),'|');

        if (numerate(line_data[0]) == numerate(exeption[0]+" "))
        {
            end = exeption[1];
        }
    }

    if (line_data.length > 1) {
        ends = line_data[1];
    }

    if (upl && line_data.length>1) {
        endss = line_data[2];
    }

    return(endss+function_struct[0]+end+function_struct[1]+ends+function_struct[2]);
}

String insertLIBS()
{
    JSONArray values = loadJSONArray("C:/hydra/libs.json");

    String[] end = new String[values.size()];

    for (int i = 0; i < values.size(); ++i) {
        JSONObject data = values.getJSONObject(i); 
        
        end[i] = data.getString("lib");
    }

    return(assembleNL(end));
}
String insertdependancies()
{
    JSONArray values = loadJSONArray("C:/hydra/thelibrary.json");

    String[] end = new String[values.size()];

    for (int i = 0; i < values.size(); ++i) {
        JSONObject data = values.getJSONObject(i); 
        
        end[i] = data.getString("lib");
    }

    return(assembleNL(end));
}


String outvarible(String lineD,String type)
{
    String end = "";

    JSONObject data = loadJSONObject("C:/hydra/base_comp.json"); 

    String strr = data.getString("Str");
    String intt = data.getString("int");
    String fltt = data.getString("flt");
    String chrr = data.getString("chr");

    String line_data = shorten(lineD,5);

    if (numerate("str") == numerate(type)) {
        end = split(strr, '|')[0]+line_data+split(strr, '|')[1];
    }
    if (numerate("int") == numerate(type)) {
        end = split(intt, '|')[0]+line_data+split(intt, '|')[1];
    }
    if (numerate("flt") == numerate(type)) {
        end = split(fltt, '|')[0]+line_data+split(fltt, '|')[1];
    }
    if (numerate("chr") == numerate(type)) {
        end = split(chrr, '|')[0]+line_data+split(chrr, '|')[1];
    }

    return(end);
}

String shorten(String value, int length)
{
    String end = "";

    for (int i = 0; i < value.length()-length; ++i) {
        end += value.charAt(length+i);
    }

    return(end); 
}
